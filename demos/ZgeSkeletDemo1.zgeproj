<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Comment="Created by Rado1" Caption="Skelet Demo 1" ClearColor="0 0.251 0.502 1" AmbientLightColor="0.502 0.502 0.502 1" ScreenMode="0" CameraPosition="-200 -220 87.2" CameraRotation="-0.259 0 0.13" ViewportRatio="3" ClipFar="1000" MouseVisible="255" NoSound="1" AndroidPackageName="com.rado1.SkeletDemo1">
  <OnLoaded>
    <ZExternalLibrary Comment="Skeletal Animation Library" ModuleName="ZgeSkelet" CallingConvention="1" BeforeInitExp="if(ANDROID) this.ModuleName = &quot;./libZgeSkelet.so&quot;;">
      <Source>
<![CDATA[/*
  Adapter to the ZgeSkelet Library, a wrapper for a skeletal-based
  3D character animation library Cal3D.
  http://home.gna.org/cal3d

  Download Windows DLL and Android shared library from
  http://googledrive.com/host/0BxwfQ8la88ouZElvWnZpLVhSdGs/

  Project home
  http://code.google.com/p/zgeskelet

  Copyright (c) 2014 Radovan Cervenka
*/

// Core models

// Creates a new core model. Returns ID of the created core model
// which is used in other functions to refer to the core model.
int zsk_CreateCoreModel(string name) {}

// Frees the previously created core model from memory.
void zsk_DestroyCoreModel(int coreModel) {}

// Loads skeleton of a core model from file.
// Returns 1 if successful, or 0 if an error happened.
int zsk_LoadSkeleton(int coreModel, string file) {}

// Loads skeleton of a core model from memory buffer.
// Returns 1 if successful, or 0 if an error happened.
int zsk_LoadSkeletonBuffer(int coreModel, xptr buffer) {}

// Loads animation of a core model from file.
// Returns the assigned ID of the loaded animation,
// or -1 if an error happened.
int zsk_LoadAnimation(int coreModel, string file) {}

// Loads animation of a core model from memory buffer.
// Returns the assigned ID of the loaded animation,
// or -1 if an error happened.
int zsk_LoadAnimationBuffer(int coreModel, xptr buffer) {}

// Loads mesh of a core model from file.
// Returns the assigned ID of the loaded mesh,
// or -1 if an error happened.
int zsk_LoadMesh(int coreModel, string file) {}

// Loads mesh of a core model from memory buffer.
// Returns the assigned ID of the loaded mesh,
// or -1 if an error happened.
int zsk_LoadMeshBuffer(int coreModel, xptr buffer) {}

// Loads material of a core model from file. The specified
// material user ID can be used to determine the material assigned
// to the rendered sub-meshes of a model instance, see the
// zsk_GetSubmeshUserMaterialId() function for details.
// Returns the assigned ID of the loaded material,
// or -1 if an error happened.
int zsk_LoadMaterial(int coreModel, int userId, string file) {}

// Loads material of a core model from memory buffer. The specified
// material user ID can be used to determine the material assigned
// to the rendered sub-meshes of a model instance, see the
// zsk_GetSubmeshUserMaterialId() function for details.
// Returns the assigned ID of the loaded material,
// or -1 if an error happened.
int zsk_LoadMaterialBuffer(int coreModel, int userId, xptr buffer) {}

// Creates a new core material thread with the given ID.
// (See the Cal3D User's Guide for details about handling materials.)
void zsk_CreateCoreMaterialThread(int coreModel, int threadId) {}

// Sets a core material ID for a material thread / material set pair.
// (See the Cal3D User's Guide for details about handling materials.)
void zsk_SetCoreMaterialId(int coreModel,
				int threadId, int setId, int materialId) {}

// Model instances

// Creates a new model instance from the specified core model.
// Returns ID of the created model instance which is used in other
// functions to refer to the model instance.
int zsk_CreateModelInstance(int coreModel) {}

// Frees the previously created model instance from memory.
void zsk_DestroyModelInstance(int modelInst) {}

// Attaches a mesh to the model instance.
// Returns 1 if successful, or 0 if an error happened.
int zsk_AttachMesh(int modelInst, int meshId) {}

// Detaches a mesh from the model instance.
// Returns 1 if successful, or 0 if an error happened.
int zsk_DetachMesh(int modelInst, int meshId) {}

// Sets the level of detail (LOD) for all attached meshes.
// The LOD level is in the range [0.0, 1.0].
void zsk_SetLevelOfDetail(int modelInst, float lod) {}

// Interpolates the weight of an animation cycle to a new value
// in a given amount of time. If the specified animation cycle is
// not active yet, it is activated. The delay is specified in seconds.
// The weight is in the range [0.0, 1.0].
void zsk_BlendAnimCycle(int modelInst, int animationId, float weight, float delay) {}

// Fades an animation cycle out in a given amount of time.
// The delay is specified in seconds.
void zsk_ClearAnimCycle(int modelInst, int animationId, float delay) {}

// Executes an animation action. The delayIn parameter is the time
// in seconds until the animation action reaches the full weight from
// the beginning of its execution. The parameter delayOut is the time
// in seconds in which the animation action reaches zero weight at the
// end of its execution.
void zsk_ExecuteAction(int modelInst, int animationId, float delayIn,
							float delayOut) {}

// Executes an animation action. The delayIn parameter is the time
// in seconds until the animation action reaches the full weight from
// the beginning of its execution. The parameter delayOut is the time
// in seconds in which the animation action reaches zero weight at the
// end of its execution. The parameter weightTarget is the weight to
// interpolate the animation action to. If the parameter bAutoLock is
// set to 1, it prevents the action from being reset and removed
// on the last keyframe.
void zsk_ExecuteActionExt(int modelInst, int animationId, float delayIn,
							float delayOut, float weightTarget, int bAutoLock) {}

// Updates the model instance for a given amount of time. To reach real-time
// animation use ZAplication.DeltaTime as value of deltaTime.
void zsk_Update(int modelInst, float deltaTime) {}

// Sets the material set of all attached meshes.
// (See the Cal3D User's Guide for details about handling materials.)
void zsk_SetMaterialSet(int modelInst, int setId) {}

// Sets the material set of the specified mesh instance.
// (See the Cal3D User's Guide for details about handling materials.)
void zsk_SetMeshMaterialSet(int modelInst, int meshId, int setId) {}

// Meshes and textures

// Returns the number of meshes attached to the model instance.
int zsk_GetMeshCount(int modelInst) {}

// Returns the number of sub-meshes in a given mesh.
int zsk_GetSubmeshCount(int modelInst, int meshId) {}

// Returns the (file) name of the first texture attached to
// a material of the specified sub-mesh.
string zsk_GetSubmeshTexture(int modelInst, int meshId, int submeshId) {}

// Returns the user ID of a material attached to the specified sub-mesh.
int zsk_GetSubmeshUserMaterialId(int modelInst, int meshId, int submeshId) {}

// Rendering

// Renders the whole model instance. If bSetColor is set to 1, rendering sets
// the color of sub-meshes as specified in their materials. If bSetColor
// is 0, rendering does not change the sub-mesh colors. If bRenderTexture
// is set to 1, rendering uses the texture of the current material to render
// all meshes of the model instance. If bRenderTexture id set to 0, the model
// is not rendered with textures.
void zsk_RenderModelInstance(int modelInst, int bSetColor, int bRenderTexture) {}

// Renders a single sub-mesh of the model instance. If bSetColor is set to 1,
// rendering sets the color of the sub-mesh as specified in its material.
// If bSetColor is 0, rendering does not change the sub-mesh color.
// If bRenderTexture is set to 1, rendering uses the texture of the current
// material to render the sub-mesh. If bRenderTexture id set to 0, the sub-mesh
// is not rendered with texture.
void zsk_RenderSubmesh(int modelInst, int meshId, int submeshId,
        int bSetColor, int bRenderTexture) {}]]>
      </Source>
    </ZExternalLibrary>
    <ZLibrary Comment="Globals">
      <Source>
<![CDATA[const int FALSE = 0;
const int TRUE = 1;

const int NUMBER_OF_MESHES = 20;
const int NUMBER_OF_ANIMATIONS = 7;
const int ACTION_ANIMATIONS_FROM = 5;
const int NUMBER_OF_MATERIALS = 4;
const string RESDIR = ANDROID ? "/assets/skeleton/" : "skeleton\\";

int SkeletonCoreModel;

byte[] fileBuffer;

// Utils

// load file and store it in a buffer which is then returned
byte[] load(string filename){
  @FileAction(File:
    @File(FileName: RESDIR + filename, Encoding: 1, TargetArray: fileBuffer),
    Action : 0);

  return fileBuffer;
}]]>
      </Source>
    </ZLibrary>
    <ZExpression Comment="Init">
      <Expression>
<![CDATA[// set instruction text
InstructionText.Text = ANDROID ?
  "Tap to activate animations..." :
  "LMB click to activate animations...";

// create core model
SkeletonCoreModel = zsk_CreateCoreModel("skeleton");

// load skeleton
zsk_LoadSkeletonBuffer(SkeletonCoreModel, load("skeleton.csf"));

// load animations
zsk_LoadAnimationBuffer(SkeletonCoreModel, load("skeleton_idle.caf"));
zsk_LoadAnimationBuffer(SkeletonCoreModel, load("skeleton_walk.caf"));
zsk_LoadAnimationBuffer(SkeletonCoreModel, load("skeleton_jog.caf"));
zsk_LoadAnimationBuffer(SkeletonCoreModel, load("skeleton_hiphop.caf"));
zsk_LoadAnimationBuffer(SkeletonCoreModel, load("skeleton_strut.caf"));

zsk_LoadAnimationBuffer(SkeletonCoreModel, load("skeleton_wave.caf"));
zsk_LoadAnimationBuffer(SkeletonCoreModel, load("skeleton_shoot_arrow.caf"));

// load meshes
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_head.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_calf_left.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_calf_right.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_chest.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_foot_left.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_foot_right.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_hand_left.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_hand_right.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_head.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_hair.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_lowerarm_left.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_lowerarm_right.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_neck.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_pelvis.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_spine_lower.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_spine_upper.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_thigh_left.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_thigh_right.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_upperarm_left.cmf"));
zsk_LoadMeshBuffer(SkeletonCoreModel, load("skeleton_upperarm_right.cmf"));

// load materials
zsk_LoadMaterialBuffer(SkeletonCoreModel, 0, load("skeleton_bone.xrf"));
zsk_LoadMaterialBuffer(SkeletonCoreModel, 1, load("skeleton_hair1.xrf"));
zsk_LoadMaterialBuffer(SkeletonCoreModel, 2, load("skeleton_hair2.xrf"));
zsk_LoadMaterialBuffer(SkeletonCoreModel, 3, load("skeleton_hair3.xrf"));

// set materials; all are added to set 0
for(int i = 0; i < NUMBER_OF_MATERIALS; ++i){
  zsk_CreateCoreMaterialThread(SkeletonCoreModel, i);
  zsk_SetCoreMaterialId(SkeletonCoreModel, i, 0, i);
}]]>
      </Expression>
    </ZExpression>
    <SpawnModel Model="SkeletonModel" SpawnStyle="1"/>
  </OnLoaded>
  <OnClose>
    <ZExpression Expression="zsk_DestroyCoreModel(SkeletonCoreModel);"/>
  </OnClose>
  <OnRender>
    <UseMaterial Material="TextMaterial"/>
    <RenderText Name="InstructionText" Text="LMB click to activate animations..." Y="0.92" Scale="0.3"/>
    <RenderText X="-0.8" Y="0.24" Scale="0.5" Align="1">
      <Text>
<![CDATA[idle
walk
jog
hip hop
strut]]>
      </Text>
    </RenderText>
    <RenderText Name="CurrentAnimationPointer" Text="&gt;" X="-0.85" Y="0.24" Scale="0.5" Align="1"/>
    <RenderText Text="wave" X="0.4" Y="0.56" Scale="0.5" Align="1"/>
    <RenderText Text="shoot arrow" X="0.26" Y="-0.62" Scale="0.5" Align="1"/>
  </OnRender>
  <Content>
    <Group Comment="Artwork">
      <Children>
        <Material Name="BoneMaterial" Color="1 1 0.8 1" Shininess="128" DrawBackFace="255"/>
        <Bitmap Name="DroidBitmap" Width="4" Height="4" Filter="2">
          <Producers>
            <BitmapFromFile Comment="Imported from Droid.bmp">
              <BitmapFile>

              </BitmapFile>
            </BitmapFromFile>
          </Producers>
        </Bitmap>
        <Font Name="DroidFont" Bitmap="DroidBitmap" FirstChar="32" CharPixelWidth="21" CharPixelHeight="32"/>
        <Material Name="TextMaterial" Shading="1" Color="1 1 0.502 1" Light="0" Blend="2" ZBuffer="0" Font="DroidFont"/>
      </Children>
    </Group>
    <Model Name="SkeletonModel">
      <Definitions>
        <Variable Name="SkeletonInstance" Type="1"/>
        <Variable Name="SkeletonCurrentAnimation" Type="1"/>
      </Definitions>
      <OnRender>
        <UseMaterial Material="BoneMaterial"/>
        <ZExpression Expression="zsk_RenderModelInstance(SkeletonInstance, TRUE, FALSE);"/>
      </OnRender>
      <OnUpdate>
        <ZExpression Comment="Update animation" Expression="zsk_Update(SkeletonInstance, App.DeltaTime);"/>
        <KeyPress Name="NumberKeys" Keys="{" RepeatDelay="0.5">
          <OnPressed>
            <ZExpression Comment="Change animation">
              <Expression>
<![CDATA[int i;

if(App.MousePosition.X < 0){
  i = SkeletonCurrentAnimation + 1;
  if(i == ACTION_ANIMATIONS_FROM) i = 0;
} else {
  if(App.MousePosition.Y < 0)
    i = 6;
  else
    i = 5;
}

if(SkeletonCurrentAnimation != i){
  if(i < ACTION_ANIMATIONS_FROM){
    // change cycle animation
    zsk_ClearAnimCycle(SkeletonInstance, SkeletonCurrentAnimation, 2);
    zsk_BlendAnimCycle(SkeletonInstance, i, 0.5, 2);
    SkeletonCurrentAnimation = i;

    CurrentAnimationPointer.Y = 0.24 - i*0.09;

  } else {
    // trigger action animation
    zsk_ExecuteAction(SkeletonInstance, i, 0, 0);
  }
}]]>
              </Expression>
            </ZExpression>
          </OnPressed>
        </KeyPress>
      </OnUpdate>
      <OnSpawn>
        <ZExpression Comment="Init model instance">
          <Expression>
<![CDATA[// create instance
SkeletonInstance = zsk_CreateModelInstance(SkeletonCoreModel);

// attach meshes
for(int i = 0; i < NUMBER_OF_MESHES; ++i)
  zsk_AttachMesh(SkeletonInstance, i);

// set material set; ther is only set 0
zsk_SetMaterialSet(SkeletonInstance, 0);

// start animtion
SkeletonCurrentAnimation = 0;
CurrentAnimationPointer.Y = 0.24;

zsk_BlendAnimCycle(SkeletonInstance, 0, 0.5, 0);]]>
          </Expression>
        </ZExpression>
      </OnSpawn>
      <OnRemove>
        <ZExpression Comment="Destroy model instance" Expression="zsk_DestroyModelInstance(SkeletonInstance);"/>
      </OnRemove>
    </Model>
  </Content>
</ZApplication>
